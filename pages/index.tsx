import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import axios from 'axios'
import { useRecoilState, useRecoilValue } from 'recoil'
import { isSelected, selected_todo, todoList } from '../atoms/atoms'
import TodoDetail from '../components/TodoDetail'
import { Todo_wrapper } from '../styles/todolist.style'
import { Title2 } from '../components/Title'
import TodoList from '../components/TodoList'
import CreateTodo from '../components/CreateTodo'


export default function Home() {
  const API_URI = process.env.NEXT_PUBLIC_API_URI;
  const [tokenState, setTokenState] = useState(false);
  const [todos, setTodos] = useRecoilState(todoList);
  const selectedTodo = useRecoilValue(selected_todo);
  const [showDetail, setShowDetail] = useRecoilState(isSelected);
  
  const router = useRouter();
  

  useEffect(() => {
    const token = localStorage.getItem('token');
    
    if(token){// 토큰이 있는 경우
      // 통신 헤더 토큰 설정
      axios.defaults.headers.common['Authorization'] = `${token}`;
      
      if(token){// 토큰이 유효한 경우 -> 조건 구현 아직 x
        router.push('/'); //루트 경로로 이동
        setTokenState(true);
        
        axios.get(API_URI + '/todos') // todo list 목록 불러오기
        .then((res) => {
          setTodos(res.data.data);
        })
        .catch((err) => console.log(err));

      }else{ //토큰이 유효하지 않은 경우
        alert('토큰 유효하지 않음') //사용자에게 알리고
        router.push('/auth'); //로그인 페이지로 이동
      }

    }else{ // 토큰이 없는 경우
      router.push('/auth'); //로그인 페이지로 이동
    }
  },[tokenState])


  useEffect(() => {
    // todo 상세를 불러왔다면 상세 페이지 보여주기
    if(Object.keys(selectedTodo).length > 0){
      setShowDetail(true);
    }
  },[selectedTodo])


  // 로그아웃
  const logout = () => {
    localStorage.clear();
    setTokenState(false);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <Todo_wrapper>
        <Title2 />
        <button className='logout-btn' onClick={logout}>로그아웃</button>
        <section>
          <TodoList todos={todos} />
          {showDetail && <TodoDetail />}
        </section>
        <CreateTodo />
      </Todo_wrapper>
    </>
  )
}
